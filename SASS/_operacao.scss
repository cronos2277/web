.operacao{
    /* 
        Voce pode fazer operacoes matematicas no SASS, mas fique atento a algumas coisas.
    1) Procure deixar um espaco entre o operando e os operadores, isso pode dar problemas
    com operandos, principalmente na divisao ou no resto de divisao, uma vez que o mesmo
    pode entender 4/2 como valor ao inves de calcular o valor disso.
    2) Use a mesma medida sempre, ou seja  so tire pixel de pixel, polegadas de polegadas e etc..
    Nao misture unidades de medida, pois isso pode dar erro na compilacao do SASS.
    3) Procure usar parenteses para isso, isso evite problemas lexicos com o compilador.
    */
    width: (20px + 80px); //Soma 100px
    height: (75 * 2px); //Multiplicacao 150px, um dos operandos pode ficar sem unidade de medida sem problemas.
    border: (300px / 150); //Aqui o operando esta no primeiro numero, o oposto do de cima.
    margin-top: (30px - (2 * 5)); //Voce pode tambem fazer operacoes de matematica aqui, no caso 30 que diminui a multiplicacao de 2 e 5.
    /*
        funcoes como lighten e darken recebem dois parametros a cor em questao e o quanto sera aplicado de efeito nela
        em porcentagem, nesse caso o fundo eh clareado 40% e o texto escurecido 50%.
    */
    background-color: lighten($color: #000000, $amount: 40); //Essa funcao deixa a cor mais clara
    color: darken($color: #FFF, $amount: 40); //Essa funcao deixa a cor mais escura.
    /*
        adjust-hue muda a posicao da cor, no caso escolhemos o vermelho e movemos a cor, no disco de cores
        180 graus.
    */
    box-shadow: (4 % 5px) (2 * 3px) (44px / 4) adjust-hue($color: red, $degrees: 180); //Essa funcao muda a matriz na cor, no disco de cores.
    padding: 15 + px; //Concatenacao. No caso aqui o SASS entende como uma string, logo o mesmo trabalha como se fosse uma string.
}
/*Tambem tem a opcao de desvio condicional no SASS. */
@if 1 == 1 and true { //Esse eh o exemplo mais simples, porem recomenda-se usar o parentes, esse eh um if simples.
    .desvio{
        @if(2 < -1 and not false){ //Aqui temos um IF dentro de parentes.
            //Nao vai executar.
        }@else if(3 % 2 != 1 or true){ //Else if
            width:100px;
            height:200px;
            background-color:blue;
            color:white;
        }@else{ //Caso o if e else seja falso.
            //Nao vai executar
        }
        /*
            O if, else if e else funcionam da mesma forma que qualquer outra linguagem de programacao, porem de maneira com uma quantidade mais restrita
            de operadores, logo temos os operadores: (<, <=, >, >=, ==, !=).
            Tambem use o "not" como operador de negacao, "and" no lugar de &&, uma vez que o & eh o equivalente ao super do Java ou o parent do PHP.
            Por fim nao use o duplo pipe como operador, ao inves disso use o: "or".
        */
    }
}

/*
    Essa eh a sintaxe do @for, ele funciona como um laco for das linguagens de programacao. Apesar da funcionalidade a sintaxe eh um pouco diferente.
    @for VariavelDeContagem from ValorInicial to ValorFinal; Inicialmente voce define uma variavel de contador, depois do from voce informa o valor
    inicial do contador e o valor final, no caso o step ai esta como 1.
    to => Seria equivalente ao menor, no exemplo abaixo o 5 nao eh incluso no $contador1
    through => Equivalente ao menor igual, no exemplo eh incluido o numero 9.
*/
@for $contador1 from 1 to 5 {
    #id#{$contador1}{
        background-color: adjust-hue($color: green, $degrees: $contador1 * 180);
        color: adjust-hue($color: #F0F, $degrees: $contador1 * 180);
    }
}
@for $contador2 from 5 through 9 {
    #id#{$contador2}{
        background-color: adjust-hue($color: aqua, $degrees: $contador2 * 180);
        color: adjust-hue($color: red, $degrees: $contador2 * 180);
    }
}

/*
    Aqui temos um exemplo de como funciona o @while, o mesmo ele exige uma condicao
    booleana para parada. Lembre-se de criar uma condicao que ativa o criterio de
    parada dentro do while para evitar laco infinitos.
*/
$condicao: 1;
@while ($condicao < 10){
    #id#{$condicao}{
        width: 150px;
        border-width: 3px;
        border-color: darken($color: #FFF, $amount: 100);
        display: inline-block;        
    }
    $condicao: ($condicao + 1);
}

/*
    O @each funciona exatamente como os forEach das linguagens de programacao.
    @each "cada item do array" in "o array";
*/
$lista: [classe1 classe2 classe3]; //O array a ser usado
@each $item in $lista {    
    .#{$item}{
        box-shadow: 5px 5px 10px black;
        margin-top: 10px;
    }
}
